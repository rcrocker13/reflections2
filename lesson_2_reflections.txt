What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository you're creating a system to track changes to the files within the repo. This system allows you to promote new developments, brach off for experimentation as well as collaborate with others who also have access to the repo.

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area holds references to files whose changes are ready be tracked with a commit to the master branch. The working directory holds the files we're making changes to, but doesn't have anything to do with what's being commited the the master branch. The repository is the system git uses the track all these changes and make developers everywhere more capable. By using the staging area as an intermediary between our working directory and the repository housing our commits we have more control over what is getting monitored.

How can you use the staging area to make sure you have one commit per logical change?

With the staging area you can add file individually. This is valuable because not every file is going to be a part of your logical commit. By not adding everything at once you can you can commit the logical changes per gits' best practices.

How do the diagrams help you visualize the branch structure?

Visualization the branches makes the branch structure very clear. Without understanding the structure it's much more difficult to understand concepts like detached head.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

The result is everything from Master and the merging branch merging into an integrated version of master. The git log contains history of the both branches commits now.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

pros:
Auto merging takes much of the hardships out of merging files that have been changed on different branches.

cons:
Auto merging might make a bad guess and merge files that weren't meant to be merged into the same. That could potentially overwrite work you spend a lot of time developing.
